<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-02T21:10:11-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Nigel Charleston - Programmer</title><subtitle>This is Nigel Charleston's Portfolio</subtitle><entry><title type="html">Project Blue: Extended Pre-Alpha Sprint</title><link href="http://localhost:4000/game/development/2020/03/02/Project-Blue-Extended-PreAlpha-Sprint.html" rel="alternate" type="text/html" title="Project Blue: Extended Pre-Alpha Sprint" /><published>2020-03-02T00:00:00-05:00</published><updated>2020-03-02T00:00:00-05:00</updated><id>http://localhost:4000/game/development/2020/03/02/Project-Blue-Extended-PreAlpha-Sprint</id><content type="html" xml:base="http://localhost:4000/game/development/2020/03/02/Project-Blue-Extended-PreAlpha-Sprint.html">&lt;p&gt;Leading up to the Spring Break Sprint for Project Blue, I worked on making AI for the game’s Acrobat enemy. In addition, I working on a DevOps solution that will allow for our web developer’s work to be automatically saved and pushed to the studio’s github repo. I also created several prototypes inspired by games that I have been playing recently.&lt;/p&gt;

&lt;p&gt;Acrobat AI:&lt;/p&gt;

&lt;p&gt;For this sprint, my main task was to implement the movement behaviors for the Acrobat enemy. The Acrobat is an agile enemy which has the following movement patterns:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/AcrobatMovement.png&quot; alt=&quot;Movement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The enemy must first detect the player by using a script called “EnemyAggro.” The enemy is surrounded by a sphere collider; when the player enter’s this spear, an event called “OnAggro” is triggered. Upon detecting the player, the enemy will leap to the players location in order to detect them. Upon executing this attack, there is a brief cooldown, and then the enemy will reset by performing a “repose” to a nearby wall.&lt;/p&gt;

&lt;p&gt;In order to implement this behavior, I modeled the Acrobats behavior to a finite state machine:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/AcrobatStateMachine.PNG&quot; alt=&quot;StateMachine&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Acrobat’s movement script, one function is used to control the movements of the enemy. We can model the movements into three states: “dormant”, “leap”, and “repose”. In the script, there is a check to determine what the current state of the enemy is, then the enemy’s movement is modify by directly accessing its “FlyingMovementScript” component (component that moves the enemy given a desired velocity).&lt;/p&gt;

&lt;p&gt;In the dormant sage, we make sure that the enemy is not movement by zeroing out their velocity. Upon an “OnAggro” event, the enemy’s aggro script will execute a function that changes the acrobat’s state to Leaping, and then set the enemy’s velocity to launch into the direction of the player. If the enemy still has sight of the player, it will transition to the “repose” stage, and return to its original location. This behavior is repeated until the player exits the Acrobat’s aggro range. A deaggro event is executed in thsi case, and the enemy is transitioned back to “dormant.”&lt;/p&gt;

&lt;div style=&quot;width:100%;height:0;padding-bottom:54%;position:relative;&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/kxl8E6lOuWr2QSqtaz&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;position:absolute&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://giphy.com/gifs/kxl8E6lOuWr2QSqtaz&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Rsync Version Control:&lt;/p&gt;

&lt;p&gt;Another tasks that I was assigned with recently is releated to DevOps. Currently, we have a web developer who is working on Project Blue’s promotional website.&lt;/p&gt;

&lt;p&gt;Whenever they write code to modify the website’s interface, they have to manually add, commit, and send the changes that they make to the server which is hosting the website. My task was to research rsync, a file transfering tool avaliable in Linux systems, and come up with a solution that would automatically update the repository whenever the a change is made to it. To begin this task, I developed a script which allows for me to automatically send changes I make to my website repository to a repository belonging to my CAEN account (a computing resource provided to computer science students at the University of Michigan):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#! /bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DIRECTORY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~/test_project_blue&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/mnt/c/users/123ch/Nigel2016.github.io/*&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DESTINATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ndcharle@oncampus-course.engin.umich.edu&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;rsync &lt;span class=&quot;nt&quot;&gt;-ruve&lt;/span&gt; ssh &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SOURCE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DESTINATION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIRECTORY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;10
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The script here will perform the rsync command every 10 seconds: it takes code in a source directory and attempts to send it to “${DESTINATION}:${DIRECTORY}.” The only issue with this script is that “oncampus-course.engin.umich.edu” is a domain belonging to my University, and requires me to login using my CAEN password whenever I want to establish a connection. A better solution would require for this login process to be done automatically, if not skipped.&lt;/p&gt;

&lt;p&gt;Moreover, the actual solution should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/files/rsync.PNG&quot; alt=&quot;rsync&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The script must be ran as a process on the server where the website’s repository is located. Rsync must be able to establish a connection with the web developer’s computer, and pull any changes that the developer makes into the server repository. I will continue to work on this solution in the comming weeks, and will give an update in the next blog post.&lt;/p&gt;</content><author><name></name></author><summary type="html">Leading up to the Spring Break Sprint for Project Blue, I worked on making AI for the game’s Acrobat enemy. In addition, I working on a DevOps solution that will allow for our web developer’s work to be automatically saved and pushed to the studio’s github repo. I also created several prototypes inspired by games that I have been playing recently. Acrobat AI: For this sprint, my main task was to implement the movement behaviors for the Acrobat enemy. The Acrobat is an agile enemy which has the following movement patterns: The enemy must first detect the player by using a script called “EnemyAggro.” The enemy is surrounded by a sphere collider; when the player enter’s this spear, an event called “OnAggro” is triggered. Upon detecting the player, the enemy will leap to the players location in order to detect them. Upon executing this attack, there is a brief cooldown, and then the enemy will reset by performing a “repose” to a nearby wall. In order to implement this behavior, I modeled the Acrobats behavior to a finite state machine: In the Acrobat’s movement script, one function is used to control the movements of the enemy. We can model the movements into three states: “dormant”, “leap”, and “repose”. In the script, there is a check to determine what the current state of the enemy is, then the enemy’s movement is modify by directly accessing its “FlyingMovementScript” component (component that moves the enemy given a desired velocity). In the dormant sage, we make sure that the enemy is not movement by zeroing out their velocity. Upon an “OnAggro” event, the enemy’s aggro script will execute a function that changes the acrobat’s state to Leaping, and then set the enemy’s velocity to launch into the direction of the player. If the enemy still has sight of the player, it will transition to the “repose” stage, and return to its original location. This behavior is repeated until the player exits the Acrobat’s aggro range. A deaggro event is executed in thsi case, and the enemy is transitioned back to “dormant.” via GIPHY Rsync Version Control: Another tasks that I was assigned with recently is releated to DevOps. Currently, we have a web developer who is working on Project Blue’s promotional website. Whenever they write code to modify the website’s interface, they have to manually add, commit, and send the changes that they make to the server which is hosting the website. My task was to research rsync, a file transfering tool avaliable in Linux systems, and come up with a solution that would automatically update the repository whenever the a change is made to it. To begin this task, I developed a script which allows for me to automatically send changes I make to my website repository to a repository belonging to my CAEN account (a computing resource provided to computer science students at the University of Michigan): #! /bin/bash DIRECTORY=&quot;~/test_project_blue&quot; SOURCE=&quot;/mnt/c/users/123ch/Nigel2016.github.io/*&quot; DESTINATION=&quot;ndcharle@oncampus-course.engin.umich.edu&quot; while true; do sudo rsync -ruve ssh ${SOURCE} ${DESTINATION}:${DIRECTORY} sleep 10 done The script here will perform the rsync command every 10 seconds: it takes code in a source directory and attempts to send it to “${DESTINATION}:${DIRECTORY}.” The only issue with this script is that “oncampus-course.engin.umich.edu” is a domain belonging to my University, and requires me to login using my CAEN password whenever I want to establish a connection. A better solution would require for this login process to be done automatically, if not skipped. Moreover, the actual solution should look something like this: The script must be ran as a process on the server where the website’s repository is located. Rsync must be able to establish a connection with the web developer’s computer, and pull any changes that the developer makes into the server repository. I will continue to work on this solution in the comming weeks, and will give an update in the next blog post.</summary></entry><entry><title type="html">Project Blue: Pre-Alpha 1 Sprint</title><link href="http://localhost:4000/game/development/2020/02/17/Project-Blue-PreAlpha-Sprint.html" rel="alternate" type="text/html" title="Project Blue: Pre-Alpha 1 Sprint" /><published>2020-02-17T00:00:00-05:00</published><updated>2020-02-17T00:00:00-05:00</updated><id>http://localhost:4000/game/development/2020/02/17/Project-Blue-PreAlpha-Sprint</id><content type="html" xml:base="http://localhost:4000/game/development/2020/02/17/Project-Blue-PreAlpha-Sprint.html">&lt;p&gt;This will be my first blog post regarding my contributions to the WolverineSoft Studio’s game project (currently dubbed Project Blue). We are conceptualizing and building a new action adventure game from the ground up using Unity as our game engine.&lt;/p&gt;

&lt;p&gt;What I do:&lt;/p&gt;

&lt;p&gt;I am a programmer and designer on the Enemies team of the Project. As a designer, I am tasked with creating concepts for enemies that the player will encounter throughout their experience, and designing their movements and attacks. As a programmer, I am responsible for programming the artificial intelligence for the enemies, and creating C# scripts which other developers throughout the studio can use to tune the enemies behavior as they debug features in Unity’s editor.&lt;/p&gt;

&lt;p&gt;Design:&lt;/p&gt;

&lt;p&gt;For this sprint, I was tasked with drafting two enemy design concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;The first enemy, the Gungnir, is a range based thrower that challenges the player into mastering the game’s signature mechanic. The player’s main use of navigating through the game enviornment is a weapon teleportation technique, where they can throw their weapon and rapidly warp to its destination. The Gungnir throws high velocity projectiles at the player. The idea behind this enemy is that ordinary manuevers (jumping and running) cannot be used to avoid its attacks. The weapon teleport mechanic must be utilized in order to dodge the Gungnir’s fast attacks and to get close enough to the enemy in order to defeat it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The second enemy, the Sniper, is a slow moving enemy that defy’s gravity and shoots homing projectiles at the player. Rather than sticking to the ground, the Sniper moves through the environment by utilizing portals to warp and flank the player from behind. They fire bursts of magic missiles which will target’s its prey with great precision. The motivation behind this enemy is to give the player another practical means of using the weapon teleportation mechanic to outmaneuver and kill opponents. All the while, they are a relatively easy enemy to defeat once the player realizes they can deflect the enemies projectiles. An idea I had for this enemy is if the player warps into, and strikes the missiles, they can deflect the missiles back at the Sniper, and kill it instantly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While coming up with these concepts, I thought about how they could positiviely enhance the player’s experience. How can the enemies challenge the player’s understanding of the game’s mechanics, without being a huge burden on their progress? In what ways can enemies be used to make the weapon teleportation mechanic useful in combat, in addition to ordinary exploration? My intent was to design enemies which motivate the player to learn the weapon teleportation mechanic, and to challenge them into using this mechanic as a means of survival.&lt;/p&gt;

&lt;p&gt;Programming:&lt;/p&gt;

&lt;p&gt;During this sprint, I was also responisble for creating a Flying Character Script. Given a 2D velocity (x,y), the script had to move a game object in that velocity’s direction:&lt;/p&gt;

&lt;div style=&quot;width:100%;height:0;padding-bottom:54%;position:relative;&quot;&gt;&lt;iframe src=&quot;https://giphy.com/embed/MdMOBgALWG84rSDJiB&quot; width=&quot;100%&quot; height=&quot;100%&quot; style=&quot;position:absolute&quot; frameborder=&quot;0&quot; class=&quot;giphy-embed&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://giphy.com/gifs/MdMOBgALWG84rSDJiB&quot;&gt;via GIPHY&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Through a public variable in my script, a developer can control the movement of the object by inputing a x and y value into the Unity editor. This script can also be referenced by other scripts to make objects fly, making it foundational for flying enemies that will eventually be featured in the game.&lt;/p&gt;

&lt;p&gt;My main difficulty with writing the script was figure out which methods in unity would be best for moving the object. There are many different methods avaliable that can manipulate the position of a game object.Some of these involve getting an objects “transform” component, and manually setting the x, y, and z positions of the component, or modifying the “RidgidBody” components movement by applying a force with the “AddForce” function. What I ultimately stored a reference to the “RidgidBody” in the script, then directly modifed it’s velocity variable using a public variable. I believed that this would be the simplest way to modify the object. In the fututre, I will ask the lead developers on clarification regarding best practices for manipulating 3D objects as are code base becomes more complex.&lt;/p&gt;

&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;Overall, this sprint went smoothly. I believe that I was given tasks which were clear in scope, and could be done within the tiem constrait of the sprint (2 weeks). The only downside was that I was not given much work to complete. This is understandable, since the project has only just finished its conceptual phase. As development ramps up, there will be an abundance of opportunities to contribute code and design to the game.&lt;/p&gt;</content><author><name></name></author><summary type="html">This will be my first blog post regarding my contributions to the WolverineSoft Studio’s game project (currently dubbed Project Blue). We are conceptualizing and building a new action adventure game from the ground up using Unity as our game engine.</summary></entry></feed>